// Package server provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.3.0 DO NOT EDIT.
package server

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/gin-gonic/gin"
	"github.com/oapi-codegen/runtime"
)

// Balance defines model for Balance.
type Balance struct {
	Balance string `json:"balance"`
}

// ServerInterface represents all server handlers.
type ServerInterface interface {

	// (GET /docs)
	GetDocs(c *gin.Context)
	// Get Eth Balance
	// (GET /eth/balance/{address})
	GetEthBalanceAddress(c *gin.Context, address string)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandler       func(*gin.Context, error, int)
}

type MiddlewareFunc func(c *gin.Context)

// GetDocs operation middleware
func (siw *ServerInterfaceWrapper) GetDocs(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetDocs(c)
}

// GetEthBalanceAddress operation middleware
func (siw *ServerInterfaceWrapper) GetEthBalanceAddress(c *gin.Context) {

	var err error

	// ------------- Path parameter "address" -------------
	var address string

	err = runtime.BindStyledParameterWithOptions("simple", "address", c.Param("address"), &address, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter address: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetEthBalanceAddress(c, address)
}

// GinServerOptions provides options for the Gin server.
type GinServerOptions struct {
	BaseURL      string
	Middlewares  []MiddlewareFunc
	ErrorHandler func(*gin.Context, error, int)
}

// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlers(router gin.IRouter, si ServerInterface) {
	RegisterHandlersWithOptions(router, si, GinServerOptions{})
}

// RegisterHandlersWithOptions creates http.Handler with additional options
func RegisterHandlersWithOptions(router gin.IRouter, si ServerInterface, options GinServerOptions) {
	errorHandler := options.ErrorHandler
	if errorHandler == nil {
		errorHandler = func(c *gin.Context, err error, statusCode int) {
			c.JSON(statusCode, gin.H{"msg": err.Error()})
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandler:       errorHandler,
	}

	router.GET(options.BaseURL+"/docs", wrapper.GetDocs)
	router.GET(options.BaseURL+"/eth/balance/:address", wrapper.GetEthBalanceAddress)
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/3RSTY/TMBD9K9bAMdRhuax8W8QKrUCigiP04DqTxqvENuNJRRXlvyM77jecYsXP8z7m",
	"TWD8ELxDxxHUBNF0OOh8/Kh77QymYyAfkNhivtieL1pPg2ZQ4MZhiwQV8CEgKIhM1u1gnisg/D1awgbU",
	"z9PTzQnot69oGOaEtK71aWqD0ZANbL0DBc/cIeE4iCJIrMn/OYin9csvlwgt97jA7hFQwR4pLoPer2qY",
	"K/ABnQ4WFHxY1asHqCBo7rIz2XiTDzvk9EmudZLx0oCCz8if0n2yFIN3cYnjoa7vRX/7kr2z3sXkO4zb",
	"3pp3iXaT/kvkTpYw5KSbhjDG+YL5etp3ZLK4R8EdilMe5b1oPQktdnaPTpRRqxzNnfxn7kpETwsumyc9",
	"ICMloRPYxJcCgQqcHlKy+oQ9r5JpxKq05aoIZ/BtEzb/zs14x+iyaR1Cb01WLF9jcj5dULwlbEHBG3lu",
	"rCx1lceu5hpdZ/djNAZjbMe+PwgqQTbH8PKW4jgMmg5LRuKiSPC/DaZHSPtjaNeMX73RvQhkDYoFBRWM",
	"1IOCjjlEJWWfIJ2PrB7rx1pCCqcw3U5bZ+JS5rKRCzHzZv4bAAD//3nia+LEAwAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
